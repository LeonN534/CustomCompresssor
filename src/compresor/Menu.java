
package compresor;

import com.formdev.flatlaf.intellijthemes.FlatDraculaIJTheme;
import static comprimirAlgoritmo.Algoritmo.*;
import java.io.File;
import java.io.IOException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JComponent;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import org.apache.commons.compress.compressors.CompressorException;
import static verificacionAlgoritmo.Verificacion.*;
import static descomprimirAlgoritmo.Algoritmo.*;

public class Menu extends javax.swing.JFrame {

    /**
     * Creates new form Menu
     */
    public Menu() {
        FlatDraculaIJTheme.setup();
        setResizable(false);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jComboBox1 = new javax.swing.JComboBox<>();
        jComboBox2 = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Archivo o carpeta:");

        jLabel2.setText("Acción a realizar:");
        jLabel2.setEnabled(false);

        jLabel3.setText("Algoritmo a utilizar:");
        jLabel3.setEnabled(false);

        jLabel4.setText("Extesión personalizada:");
        jLabel4.setEnabled(false);

        jTextField1.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                if(jTextField1.getText().isBlank()) {
                    cambiarEstadoDeComponentes(false, List.of(jLabel2, jComboBox1, jButton2));
                } else {
                    cambiarEstadoDeComponentes(true, List.of(jLabel2, jComboBox1, jButton2));
                }
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                // Método llamado cuando se elimina texto del documento
                if(jTextField1.getText().isBlank()) {
                    cambiarEstadoDeComponentes(false, List.of(jLabel2, jComboBox1, jButton2));
                } else {
                    cambiarEstadoDeComponentes(true, List.of(jLabel2, jComboBox1, jButton2));
                }
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                // Método llamado cuando se cambia el formato del texto (poco común en JTextField)
                if(jTextField1.getText().isBlank()) {
                    cambiarEstadoDeComponentes(false, List.of(jLabel2, jComboBox1, jButton2));
                } else {
                    cambiarEstadoDeComponentes(true, List.of(jLabel2, jComboBox1, jButton2));
                }
            }
        });

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Descomprimir", "Comprimir"}));
        jComboBox1.setEnabled(false);
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });
        jComboBox1.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jComboBox1PropertyChange(evt);
            }
        });

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Deflate", "GZIP", "Bzip2", "LZ4", "Snappy", "LZMA"}));
        jComboBox2.setEnabled(false);

        jButton1.setText("...");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/compresor/CustomCompresssor.png"))); // NOI18N

        jTextField2.setEnabled(false);

        jButton2.setText("EJECUTAR");
        jButton2.setEnabled(false);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel1)
                                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(jLabel3))
                                    .addGap(69, 69, 69)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 329, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(jButton1))))))
                        .addGap(12, 12, 12)))
                .addContainerGap(30, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(16, Short.MAX_VALUE)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addGap(37, 37, 37)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(46, 46, 46)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(40, 40, 40)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addComponent(jButton2)
                .addGap(23, 23, 23))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        // Mostrar el cuadro de diálogo y obtener el resultado
        // Crear un cuadro de diálogo de selección de archivos
        JFileChooser fileChooser = new JFileChooser();

        // Configurar el modo para seleccionar archivos y carpetas
        fileChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        int resultado = fileChooser.showOpenDialog(null);

        // Verificar si el usuario seleccionó un archivo o carpeta
        if (resultado == JFileChooser.APPROVE_OPTION) {
            // Obtener la ruta completa del archivo o carpeta seleccionado
            String rutaSeleccionada = fileChooser.getSelectedFile().getAbsolutePath();

            jTextField1.setText(rutaSeleccionada);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        // Obtener el nombre del archivo o carpeta desde jTextField1
        String archivoPath = jTextField1.getText();
        String extension = jTextField2.getText();
        // Crear un objeto File para representar el archivo o carpeta
        File archivo = new File(archivoPath);

        // Verificar si el archivo o carpeta existee
        if (archivo.exists()) {
            // El archivo o carpeta existe, realiza la acción deseada aquí
            if(String.valueOf(jComboBox1.getSelectedItem()).equals("Descomprimir")) {
                if (esDeflate(archivoPath)) {
                    descomprimirArchivoDeflate(archivoPath);
                    JOptionPane.showMessageDialog(this, "Operación terminada", "Archivo comprimido", JOptionPane.INFORMATION_MESSAGE);
                } else if (esGZIP(archivoPath)) {
                    descomprimirArchivoGZIP(archivoPath);
                    JOptionPane.showMessageDialog(this, "Operación terminada", "Archivo comprimido", JOptionPane.INFORMATION_MESSAGE);

                } else if (esBzip2(archivoPath)) {
                    descomprimirArchivoBzip2(archivoPath);
                    JOptionPane.showMessageDialog(this, "Operación terminada", "Archivo comprimido", JOptionPane.INFORMATION_MESSAGE);

                } else if (esLZ4(archivoPath)) {
                    descomprimirArchivoLZ4(archivoPath);
                    JOptionPane.showMessageDialog(this, "Operación terminada", "Archivo comprimido", JOptionPane.INFORMATION_MESSAGE);

                } else if (esSnappy(archivoPath)) {
                    descomprimirArchivoSnappy(archivoPath);
                    JOptionPane.showMessageDialog(this, "Operación terminada", "Archivo comprimido", JOptionPane.INFORMATION_MESSAGE);
                } else if (esLZMA(archivoPath)) {
                    descomprimirArchivoLZMA(archivoPath);
                } else {
                    JOptionPane.showMessageDialog(this, "El archivo parece tener un formato no compatible", "El archivo no se pudo descomprimir", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                if (esSoloLetras(extension)) {
                    String algoritmo = String.valueOf(jComboBox2.getSelectedItem());
                    switch (algoritmo) {
                        case "Deflate":
                        {
                            try {
                                comprimirArchivoDeflate(archivo, extension);
                                JOptionPane.showMessageDialog(this, "Operación terminada", "Archivo comprimido", JOptionPane.INFORMATION_MESSAGE);
                            } catch (IOException ex) {
                                JOptionPane.showMessageDialog(this, "El archivo no se pudo comprimir", "Archivo no comprimido", JOptionPane.ERROR_MESSAGE);
                                Logger.getLogger(Menu.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                            break;
                        case "GZIP":
                        {
                            try {
                                comprimirArchivoGZIP(archivo, extension);
                                JOptionPane.showMessageDialog(this, "Operación terminada", "Archivo comprimido", JOptionPane.INFORMATION_MESSAGE);

                            } catch (IOException ex) {
                                JOptionPane.showMessageDialog(this, "El archivo no se pudo comprimir", "Archivo no comprimido", JOptionPane.ERROR_MESSAGE);
                                Logger.getLogger(Menu.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                            break;
                        case "Bzip2":
                        {
                            try {
                                comprimirArchivoBzip2(archivo, extension);
                                JOptionPane.showMessageDialog(this, "Operación terminada", "Archivo comprimido", JOptionPane.INFORMATION_MESSAGE);

                            } catch (IOException ex) {
                                JOptionPane.showMessageDialog(this, "El archivo no se pudo comprimir", "Archivo no comprimido", JOptionPane.ERROR_MESSAGE);
                                Logger.getLogger(Menu.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                            break;
                        case "LZ4":
                        {
                            try {
                                comprimirArchivoLZ4(archivo, extension);
                                JOptionPane.showMessageDialog(this, "Operación terminada", "Archivo comprimido", JOptionPane.INFORMATION_MESSAGE);

                            } catch (IOException ex) {
                                JOptionPane.showMessageDialog(this, "El archivo no se pudo comprimir", "Archivo no comprimido", JOptionPane.ERROR_MESSAGE);
                                Logger.getLogger(Menu.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                            break;
                        case "Snappy":
                        {
                            try {
                                comprimirArchivoSnappy(archivo, extension);
                                JOptionPane.showMessageDialog(this, "Operación terminada", "Archivo comprimido", JOptionPane.INFORMATION_MESSAGE);

                            } catch (IOException ex) {
                                JOptionPane.showMessageDialog(this, "El archivo no se pudo comprimir", "Archivo no comprimido", JOptionPane.ERROR_MESSAGE);
                                Logger.getLogger(Menu.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                            break;
                        case "LZMA":
                        {
                            try {
                                comprimirArchivoLZMA(archivo, extension);
                                JOptionPane.showMessageDialog(this, "Operación terminada", "Archivo comprimido", JOptionPane.INFORMATION_MESSAGE);
                            } catch (CompressorException ex) {
                                JOptionPane.showMessageDialog(this, "El archivo no se pudo comprimir", "Archivo no comprimido", JOptionPane.ERROR_MESSAGE);
                                Logger.getLogger(Menu.class.getName()).log(Level.SEVERE, null, ex);
                            } catch (IOException ex) {
                                JOptionPane.showMessageDialog(this, "El archivo no se pudo comprimir", "Archivo no comprimido", JOptionPane.ERROR_MESSAGE);
                                Logger.getLogger(Menu.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                            break;
                        default:
                            System.out.println("Error desconocido");
                            throw new AssertionError();
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "La extensión solo debe contener letras", "Extensión no válida", JOptionPane.ERROR_MESSAGE);
                }
            }
            
            
        } else {
            // El archivo o carpeta no existe, muestra un mensaje
            JOptionPane.showMessageDialog(this, "El archivo o carpeta no existe.", "Archivo no encontrado", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jComboBox1PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jComboBox1PropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox1PropertyChange

    
    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
        // Obtener el elemento seleccionado en el JComboBox
        String elementoSeleccionado = (String) jComboBox1.getSelectedItem();
        switch (elementoSeleccionado) {
            case "Comprimir":
                cambiarEstadoDeComponentes(true, List.of(jLabel3, jLabel4,jComboBox2, jTextField2));
                break;
            case "Descomprimir":
                cambiarEstadoDeComponentes(false, List.of(jLabel3, jLabel4,jComboBox2, jTextField2));
                break;
            default:
                System.out.println("Error desconocido");
                throw new AssertionError();
        }
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void cambiarEstadoDeComponentes(boolean estado, List<JComponent> componentes) {
        for (JComponent componente : componentes) {
            componente.setEnabled(estado);
        }
    }
    
    public static boolean esSoloLetras(String texto) {
        // Verificar si el texto está vacío o contiene solo letras
        return texto != null && texto.matches("[a-zA-Z]*");
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Menu().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    // End of variables declaration//GEN-END:variables
}
